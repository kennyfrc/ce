Any Types Analysis Report - 2025-08-29T04:09:55.805Z
Total any types: 93
Files with any types: 21

src/utils/worksheets.ts: 10 any types
  Line 475: } as any);
  Line 509: const typedPlugin = plugin as any;
  Line 590: const typedPlugin = plugin as any;
  Line 600: options: any
  Line 628: options: any
  Line 734: function (this: any, cellName: string, data: any) {
  Line 734: function (this: any, cellName: string, data: any) {
  Line 748: cell: any,
  Line 750: value: any,
  Line 777: function (this: WorksheetInstance, cell: any) {

src/utils/columns.ts: 9 any types
  Line 121: mixed?: number | any[],
  Line 124: properties?: any
  Line 224: "This action will destroy any existing merged cells. Are you sure?"
  Line 249: const historyColgroup: any[] = [];
  Line 250: const historyRecords: any[] = [];
  Line 251: const historyData: any[] = [];
  Line 252: const historyFooters: any[][] = [];
  Line 443: "This action will destroy any existing merged cells. Are you sure?"
  Line 628: "This action will destroy any existing merged cells. Are you sure?"

src/utils/helpers.ts: 9 any types
  Line 6: export const getCaretIndex = function (this: any, e: HTMLElement) {
  Line 31: export const invert = function (o: Record<string, any>) {
  Line 120: const arr: any[][] = [];
  Line 187: export const createFromTable = function (el: HTMLElement, options?: any) {
  Line 279: const mergeCells: Record<string, any> = {};
  Line 280: const rows: Record<string, any> = {};
  Line 281: const style: Record<string, any> = {};
  Line 282: const classes: Record<string, any> = {};
  Line 402: const pattern: Record<string, any>[] = [];

src/utils/copyPaste.ts: 7 any types
  Line 311: const arrayB = data.map(function (row: any[], i: number) {
  Line 340: data.map(function (row: any[]) {
  Line 341: return row.map(function (item: any) {
  Line 360: const newStyle: Record<string, any> = {};
  Line 361: const oldStyle: Record<string, any> = {};
  Line 371: .filter((x: any) => x.style.display === "none").length;
  Line 380: .filter((x: any) => x.element.style.display === "none").length;

src/utils/headers.ts: 7 any types
  Line 11: export const getHeader = function (this: any, column: any) {
  Line 11: export const getHeader = function (this: any, column: any) {
  Line 23: export const getHeaders = function (this: any, asArray: any) {
  Line 23: export const getHeaders = function (this: any, asArray: any) {
  Line 41: export const setHeader = function (this: any, column: any, newValue: any) {
  Line 41: export const setHeader = function (this: any, column: any, newValue: any) {
  Line 41: export const setHeader = function (this: any, column: any, newValue: any) {

src/utils/comments.ts: 5 any types
  Line 10: this: any,
  Line 46: export const setComments = function (this: any, cellId: any, comments: any) {
  Line 46: export const setComments = function (this: any, cellId: any, comments: any) {
  Line 46: export const setComments = function (this: any, cellId: any, comments: any) {
  Line 57: const oldValue: Record<string, any> = {};

src/utils/data.ts: 5 any types
  Line 265: const items: any[] = Array.isArray(cell)
  Line 266: ? (cell as any[])
  Line 267: : Object.keys(cell).map((k) => (cell as any)[k]);
  Line 270: const item = items[idx] as any;
  Line 444: const resultRow: Record<number, any> = {};

src/utils/filter.ts: 5 any types
  Line 8: export const openFilter = function (this: any, columnId: string | number) {
  Line 66: onclose: function (o: any) {
  Line 83: export const closeFilter = function (this: any, columnId?: number) {
  Line 95: const search = function (query: any[], x: number, y: number) {
  Line 120: export const resetFilters = function (this: any) {

src/utils/lazyLoading.ts: 5 any types
  Line 4: export const loadPage = function (this: any, pageNumber: any) {
  Line 4: export const loadPage = function (this: any, pageNumber: any) {
  Line 55: export const loadValidation = function (this: any) {
  Line 80: export const loadUp = function (this: any) {
  Line 134: export const loadDown = function (this: any) {

src/utils/orderBy.ts: 5 any types
  Line 104: (jSuites as any).translate(
  Line 105: "This action will destroy any existing merged cells. Are you sure?"
  Line 155: obj.parent.config.sorting = function (direction: any) {
  Line 156: return function (a: any, b: any) {
  Line 156: return function (a: any, b: any) {

src/utils/search.ts: 5 any types
  Line 9: export const search = function (this: any, query: string): void {
  Line 30: const search = function (item: any[], query: RegExp, index: number) {
  Line 55: obj.options.data.forEach(function (v: any, k: any) {
  Line 55: obj.options.data.forEach(function (v: any, k: any) {
  Line 82: export const resetSearch = function (this: any): void {

src/utils/config.ts: 4 any types
  Line 4: export const getWorksheetConfig = function (this: any) {
  Line 10: export const getSpreadsheetConfig = function (this: any) {
  Line 17: this: any,
  Line 18: config: any,

src/utils/merges.ts: 3 any types
  Line 146: alert((jSuites as any).translate("No cells selected"));
  Line 187: alert((jSuites as any).translate(test));
  Line 253: data: any,

src/utils/rows.ts: 3 any types
  Line 181: "This action will destroy any existing merged cells. Are you sure?"
  Line 331: "This action will destroy any existing merged cells. Are you sure?"
  Line 500: "This action will destroy any existing merged cells. Are you sure?"

src/test.ts: 2 any types
  Line 6: (window as any).jss = jspreadsheet;
  Line 10: (window as any).instance = jspreadsheet(root, {

src/utils/events.ts: 2 any types
  Line 946: } else if ((window as any).clipboardData) {
  Line 951: (window as any).clipboardData.getData("text")

src/utils/footer.ts: 2 any types
  Line 3: export const setFooter = function (this: any, data?: any) {
  Line 3: export const setFooter = function (this: any, data?: any) {

src/utils/internalHelpers.ts: 2 any types
  Line 6: export const injectArray = function (o: any[], idx: number, arr: any[]) {
  Line 6: export const injectArray = function (o: any[], idx: number, arr: any[]) {

src/utils/columnHelpers.ts: 1 any types
  Line 66: ): any | undefined {

src/utils/internal.ts: 1 any types
  Line 545: const tmp = (jSuites.calendar as any).extractDateFromString(

src/utils/selection.ts: 1 any types
  Line 182: origin?: any
